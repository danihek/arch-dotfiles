#!/usr/bin/env bash

# File containing the color definitions in JSON
input_file="$HOME/.cache/hellwal/pywalfox.json"

# Define the colors used in your theme (original color keys)
theme_colors=("color0" "color16" "color18" "color15" "color17" "color10" "color13")

# Define a new hardcoded color mapping
new_order=("color1" "color3" "color6" "color10" "color5" "color13" "color14")

# Read the JSON file
json_content=$(<"$input_file")

# Read the current color values
declare -A color_values
for color in "${theme_colors[@]}"; do
    # Extract current color value using grep (handle missing colors safely)
    value=$(grep -oP "\"$color\": \"\K[^\"]+" "$input_file")
    if [[ -n "$value" ]]; then
        color_values[$color]="$value"
    else
        echo "Warning: $color not found in JSON, skipping..."
    fi
done

# Replace colors only if they exist in the JSON
for i in "${!theme_colors[@]}"; do
    old_color="${theme_colors[i]}"
    new_color="${new_order[i]}"

    # Ensure the new color exists before replacing
    if [[ -n "${color_values[$new_color]}" ]]; then
        json_content=$(echo "$json_content" | sed "s/\"$old_color\": \"${color_values[$old_color]}\"/\"$old_color\": \"${color_values[$new_color]}\"/")
    else
        echo "Skipping replacement: $new_color does not exist in JSON."
    fi
done

# Save the modified content back to the file
echo "$json_content" > "$input_file"

